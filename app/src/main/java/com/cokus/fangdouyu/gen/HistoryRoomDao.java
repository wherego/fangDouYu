package com.cokus.fangdouyu.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cokus.fangdouyu.db.HistoryRoom;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_ROOM".
*/
public class HistoryRoomDao extends AbstractDao<HistoryRoom, Void> {

    public static final String TABLENAME = "HISTORY_ROOM";

    /**
     * Properties of entity HistoryRoom.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RoomId = new Property(0, String.class, "roomId", false, "ROOM_ID");
        public final static Property Avatar = new Property(1, String.class, "avatar", false, "AVATAR");
        public final static Property Avatar_small = new Property(2, String.class, "avatar_small", false, "AVATAR_SMALL");
        public final static Property Online = new Property(3, int.class, "online", false, "ONLINE");
    }


    public HistoryRoomDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryRoomDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_ROOM\" (" + //
                "\"ROOM_ID\" TEXT," + // 0: roomId
                "\"AVATAR\" TEXT," + // 1: avatar
                "\"AVATAR_SMALL\" TEXT," + // 2: avatar_small
                "\"ONLINE\" INTEGER NOT NULL );"); // 3: online
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_ROOM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryRoom entity) {
        stmt.clearBindings();
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(1, roomId);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
 
        String avatar_small = entity.getAvatar_small();
        if (avatar_small != null) {
            stmt.bindString(3, avatar_small);
        }
        stmt.bindLong(4, entity.getOnline());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryRoom entity) {
        stmt.clearBindings();
 
        String roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindString(1, roomId);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(2, avatar);
        }
 
        String avatar_small = entity.getAvatar_small();
        if (avatar_small != null) {
            stmt.bindString(3, avatar_small);
        }
        stmt.bindLong(4, entity.getOnline());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HistoryRoom readEntity(Cursor cursor, int offset) {
        HistoryRoom entity = new HistoryRoom( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // roomId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // avatar
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar_small
            cursor.getInt(offset + 3) // online
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryRoom entity, int offset) {
        entity.setRoomId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAvatar(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAvatar_small(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOnline(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HistoryRoom entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HistoryRoom entity) {
        return null;
    }

    @Override
    public boolean hasKey(HistoryRoom entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
